import asyncio
import json
import hashlib
import base64
import aiosqlite
import logging
import requests
from typing import Any
from aiohttp import ClientSession
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.methods import DeleteWebhook
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

# üîë –ü–û–õ–£–ß–ï–ù–ò–ï –ê–ü–ò –ö–õ–Æ–ß–ï–ô
TOKEN = '7913416215:AAFiE8uW_2ivaOTIJNPINPbJWTzwpslpF4Q'  # –¢–û–ö–ï–ù –ë–û–¢–ê
MERCHANT_UUID = "72286e95-aef4-498c-8c71-61e2952de92f"    # ID –ú–ï–†–ß–ê–ù–¢–ê
API_KEY = ""                                              # –ü–õ–ê–¢–ï–ñ–ù–´–ô API –ö–õ–Æ–ß

logging.basicConfig(level=logging.INFO)
bot = Bot(TOKEN)
dp = Dispatcher()


# üì¶ –°–û–ó–î–ê–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•
async def init_db():
    async with aiosqlite.connect("base.db") as db:
        await db.execute("""CREATE TABLE IF NOT EXISTS main (user_id INTEGER PRIMARY KEY)""")
        await db.commit()


# üîí –§–£–ù–ö–¶–ò–Ø –°–û–ó–î–ê–ù–ò–Ø –ü–û–î–ü–ò–°–ò –î–õ–Ø –ü–õ–ê–¢–ï–ñ–ê
def generate_headers(data: str) -> dict[str, Any]:
    sign = hashlib.md5(base64.b64encode(data.encode("ascii")) + API_KEY.encode("ascii")).hexdigest()
    return {"merchant": MERCHANT_UUID, "sign": sign, "Content-Type": "application/json"}


# üõí –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò –°–û–ó–î–ê–ù–ò–Ø –ü–õ–ê–¢–ï–ñ–ê
@dp.callback_query(F.data == "create_invoice")
async def create_invoice(callback: types.CallbackQuery):
    await callback.answer()
    async with ClientSession() as session:
        json_dumps = json.dumps({
            "amount": "1",
            "currency": "TON",
            "order_id": f"test-{callback.from_user.id}-02",
        })
        response = await session.post(
            "https://api.heleket.com/v1/payment",
            headers=generate_headers(json_dumps),
            data=json_dumps
        )
        invoice = await response.json()

    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
            callback_data=f"check_invoice_{invoice['result']['uuid']}"
        )
    )
    await callback.message.answer(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {invoice['result']['url']}", parse_mode='HTML', reply_markup=builder.as_markup())


# üîç –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–†–û–í–ï–†–ö–ò –ü–õ–ê–¢–ï–ñ–ê
@dp.callback_query(F.data.startswith("check_invoice_"))
async def check_invoice(callback: types.CallbackQuery):
    await callback.answer()
    async with ClientSession() as session:
        json_dumps = json.dumps({"uuid": callback.data.split("_")[2]})
        response = await session.post(
            "https://api.heleket.com/v1/payment/info",
            headers=generate_headers(json_dumps),
            data=json_dumps
        )
        invoice = await response.json()

    if invoice["result"]["status"] == "paid":
        async with aiosqlite.connect("base.db") as db:
            await db.execute("INSERT OR IGNORE INTO main (user_id) VALUES (?)", (callback.from_user.id,))
            await db.commit()
        await callback.message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.", parse_mode='HTML')
    else:
        await callback.message.answer("‚è≥ –°—á–µ—Ç –ø–æ–∫–∞ –Ω–µ –æ–ø–ª–∞—á–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode='HTML')


# üéüÔ∏è –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ –°–¢–ê–†–¢
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="üõí –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="create_invoice"),
        types.InlineKeyboardButton(text="üéüÔ∏è –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="enter_promocode")
    )
    await message.answer(
        "üì∞ –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥.",
        parse_mode='HTML',
        reply_markup=builder.as_markup()
    )


# üé´ –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò –ü–†–û–ú–û–ö–û–î–ê
@dp.callback_query(F.data == "enter_promocode")
async def ask_promocode(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:")


# üì© –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô
@dp.message(lambda message: message.text)
async def handle_messages(message: Message):
    async with aiosqlite.connect("base.db") as db:
        cursor = await db.execute("SELECT user_id FROM main WHERE user_id = ?", (message.from_user.id,))
        user = await cursor.fetchone()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ, —Ä–∞–∑—Ä–µ—à–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞
    if user:
        await handle_ai_query(message)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    if message.text.strip().upper() == "GFR-2025":
        async with aiosqlite.connect("base.db") as db:
            await db.execute("INSERT OR IGNORE INTO main (user_id) VALUES (?)", (message.from_user.id,))
            await db.commit()
        await message.answer("üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.")
        return

    # –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å—á–∏–∫ –∏ –Ω–µ –≤–≤–µ–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="üõí –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="create_invoice"),
        types.InlineKeyboardButton(text="üéüÔ∏è –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="enter_promocode")
    )
    await message.answer(
        "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–º–æ–∫–æ–¥.",
        reply_markup=builder.as_markup()
    )


# üî• –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–†–û–°–ê –ö –ù–ï–ô–†–û–°–ï–¢–ò
async def handle_ai_query(message: Message):
    url = "https://api.intelligence.io.solutions/api/v1/chat/completions"
    headers = {
        "Content-Type": "application/json",
        "Authorization": "Bearer io-v2-eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJvd25lciI6Ijg2NTAyY2Q1LTJiYjEtNGUwOS05NDE4LTgyMGY3NmU0MDNiNiIsImV4cCI6NDkwNDk1NTk5NX0.ewq1ZHcwRYnq35nUA4nKBpBpUhBZQ-EMnxsm1zcD4hyl7TGWhd70ikdQGKnCmMsdOWunAgHFDX3878pLpT2QJw"
    }

    

    payload = {
        "model": "meta-llama/Llama-3.3-70B-Instruct",
        "messages": [
            {"role": "system", "content": "You are a helpful assistant"},
            {"role": "user", "content": message.text}
        ],
    }



    try:
        response = requests.post(url, headers=headers, json=payload)
        data = response.json()

        if 'choices' in data and isinstance(data['choices'], list) and data['choices']:
            raw_text = data['choices'][0]['message']['content']
            bot_text = raw_text.split('</think>\n\n')[1] if '</think>\n\n' in raw_text else raw_text
            await message.answer(bot_text.strip(), parse_mode="Markdown")
        else:
            await message.answer("‚ö†Ô∏è –û—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –±—ã–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
            print(data)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê
async def main():
    await init_db()
    await bot(DeleteWebhook(drop_pending_updates=True))
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
